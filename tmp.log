File Content:
class Mat!1:
    def __init__(self, n1, n2, n3):
        self.n1 = n1
        self.n2 = n2
        self.n3 = n3

    def matmul(self, other):
        return self.n1 * other.n1 + self.n2 * other.n2 + self.n3 * other.n3
    

m1 = Mat!1(1,4,6)
m2 = Mat!1(3,7,8)
print(m1.matmul(m2))


Tree(Token('RULE', 'file_input'), [Tree(Token('RULE', 'classdef'), [Tree(Token('RULE', 'name'), [Token('NAME', 'Mat')]), Tree(Token('RULE', 'version'), [Token('__ANON_25', '1')]), None, Tree(Token('RULE', 'suite'), [Tree(Token('RULE', 'funcdef'), [Tree(Token('RULE', 'name'), [Token('NAME', '__init__')]), Tree(Token('RULE', 'parameters'), [Tree(Token('RULE', 'name'), [Token('NAME', 'self')]), Tree(Token('RULE', 'name'), [Token('NAME', 'n1')]), Tree(Token('RULE', 'name'), [Token('NAME', 'n2')]), Tree(Token('RULE', 'name'), [Token('NAME', 'n3')]), None, None]), None, Tree(Token('RULE', 'suite'), [Tree(Token('RULE', 'assign_stmt'), [Tree(Token('RULE', 'assign'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n1')])]), Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'n1')])])])]), Tree(Token('RULE', 'assign_stmt'), [Tree(Token('RULE', 'assign'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n2')])]), Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'n2')])])])]), Tree(Token('RULE', 'assign_stmt'), [Tree(Token('RULE', 'assign'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n3')])]), Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'n3')])])])])])]), Tree(Token('RULE', 'funcdef'), [Tree(Token('RULE', 'name'), [Token('NAME', 'matmul')]), Tree(Token('RULE', 'parameters'), [Tree(Token('RULE', 'name'), [Token('NAME', 'self')]), Tree(Token('RULE', 'name'), [Token('NAME', 'other')]), None, None]), None, Tree(Token('RULE', 'suite'), [Tree(Token('RULE', 'return_stmt'), [Tree(Token('RULE', 'arith_expr'), [Tree(Token('RULE', 'term'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n1')])]), Token('STAR', '*'), Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'other')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n1')])])]), Token('PLUS', '+'), Tree(Token('RULE', 'term'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n2')])]), Token('STAR', '*'), Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'other')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n2')])])]), Token('PLUS', '+'), Tree(Token('RULE', 'term'), [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'self')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n3')])]), Token('STAR', '*'), Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'other')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'n3')])])])])])])])])]), Tree(Token('RULE', 'assign_stmt'), [Tree(Token('RULE', 'assign'), [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'm1')])]), Tree('funccallwithversion', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'Mat')])]), Tree(Token('RULE', 'version'), [Token('__ANON_25', '1')]), Tree(Token('RULE', 'arguments'), [Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '1')]), Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '4')]), Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '6')])])])])]), Tree(Token('RULE', 'assign_stmt'), [Tree(Token('RULE', 'assign'), [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'm2')])]), Tree('funccallwithversion', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'Mat')])]), Tree(Token('RULE', 'version'), [Token('__ANON_25', '1')]), Tree(Token('RULE', 'arguments'), [Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '3')]), Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '7')]), Tree(Token('RULE', 'number'), [Token('DEC_NUMBER', '8')])])])])]), Tree(Token('RULE', 'expr_stmt'), [Tree('funccall', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'print')])]), Tree(Token('RULE', 'arguments'), [Tree('funccall', [Tree('getattr', [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'm1')])]), Tree(Token('RULE', 'name'), [Token('NAME', 'matmul')])]), Tree(Token('RULE', 'arguments'), [Tree('var', [Tree(Token('RULE', 'name'), [Token('NAME', 'm2')])])])])])])])])
[Phase 1] Prase to lark-vython AST
  --> Completed in 0.9446 seconds
[Phase 2] Transpile lark-vython AST to Python AST
  --> Completed in 0.0043 seconds
[Phase 3] Unparse Python AST
  --> Completed in 0.0066 seconds
[Phase 4] Execution
  --> Completed in 0.0037 seconds
[Result]:
79

